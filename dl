#!/usr/bin/env python3

import argparse
import datetime
import loguru
import os
import pathlib
import requests
import shutil
import time

logger = loguru.logger

def create_file(i, path, file_name):
    with open(os.path.join(path, file_name), 'w') as f:
        f.writelines(i)


def get_iteration_count(offset):
    iteration = 180
    if offset < 20:
        iteration = 1
    elif offset < 60:
        iteration = 5
    elif offset < 120:
        iteration = 10
    elif offset < 180:
        iteration = 20
    elif offset < 540:
        iteration = 60
    return iteration


def sync_wait():
    now = datetime.datetime.now()
    end = now + datetime.timedelta(days=1)
    end = datetime.datetime(end.year, end.month, end.day, 0, 0, 0, 0)

    offset = (end - now).total_seconds()
    iteration = get_iteration_count(offset)


    while offset > 0:
        logger.info('Waiting {} seconds | {} seconds remain', iteration, offset)
        time.sleep(iteration)
        offset -= iteration
        iteration = get_iteration_count(offset)

    now = time.time()
    offset = (24 * 60 * 60) - (now % (24 * 60 * 60))
    if offset < 1000:
        time.sleep(offset)


if __name__ == "__main__":
    next_day = datetime.datetime.now() + datetime.timedelta(days=1)
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", type=int, default=next_day.day, dest="day")
    parser.add_argument("-y", type=int, default=next_day.year, dest="year")
    parser.add_argument('-w', action="store_true", default=False, required=False, dest="wait")
    args = parser.parse_args()

    day, year = args.day, args.year

    path = os.path.dirname(os.path.abspath(__file__))
    cookie_path = os.path.join(path, "cookie")

    if not os.path.isfile(cookie_path):
        print("Need to supply cookie file")
        exit(1)

    with open(cookie_path, 'r') as f:
        cookie = f.readline()

    data = {'session': cookie.strip()}

    dir_path = os.path.join(path, "%d/%02d" % (year, day))

    if not os.path.isdir(dir_path):
        os.makedirs(dir_path)

    python_main_path = os.path.join(dir_path, "main.py")
    if not os.path.isfile(python_main_path):
        template_path = os.path.join(path, 'util/python.template')
        shutil.copy(template_path, python_main_path)

    if args.wait:
        sync_wait()
        logger.info("GOGOGOGOGO")

    session = requests.Session()

    logger.info("Getting input for day: {}, year {}", day, year)
    r = session.get(f'https://adventofcode.com/{year}/day/{day}/input', cookies=data)
    if r.status_code != 200:
        logger.error(r.text)
        exit(1)

    create_file(r.text, dir_path, 'input')

    logger.info("Getting prompt for day: {}, year: {}", day, year)
    r = session.get(f'https://adventofcode.com/{year}/day/{day}', cookies=data)
    if r.status_code != 200:
        logger.error(r.text)
        exit(1)

    create_file(r.text, dir_path, 'prompt.html')
    logger.info("All set. Good to go!")

